@page "/dashboard"
@using BankBlazor.Client.ViewModels
@using BankBlazor.Client.DTOs
@inject CustomerListViewModel CustomerListViewModel

<PageTitle>Dashboard</PageTitle>

<section class="hero-container">
    <div class="hero-content">
        <h2>Customer Dashboard</h2>
        <div>
            <ul>
                @foreach (var customer in CustomerListViewModel.Customers)
                {
                    <li>
                        <button @onclick="() => ShowCustomerDetails(customer.CustomerId)">
                            @customer.Givenname @customer.Surname
                        </button>
                    </li>
                }
            </ul>
            <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>
            <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>
        </div>
    </div>
</section>

@if (isCustomerDetailsVisible)
{
    <div class="custom-modal-overlay">
        <div class="custom-modal">
            <h3>Customer Details</h3>
            @if (SelectedCustomer != null)
            {
                <p><strong>Name:</strong> @SelectedCustomer.Givenname @SelectedCustomer.Surname</p>
                <p><strong>Email:</strong> @SelectedCustomer.Emailaddress</p>
                <p><strong>Phone:</strong> @SelectedCustomer.Telephonenumber</p>
                <button @onclick="CloseCustomerDetails">Close</button>
            }
            else
            {
                <p>Loading... (SelectedCustomer is null)</p>
            }
        </div>
    </div>
}



@code {
    private CustomerDTO? SelectedCustomer;
    private bool isCustomerDetailsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await CustomerListViewModel.LoadCustomersAsync();
    }

    private async Task ShowCustomerDetails(int customerId)
    {
        try
        {
            SelectedCustomer = await CustomerListViewModel.GetCustomerByIdAsync(customerId);
            if (SelectedCustomer != null)
            {
                isCustomerDetailsVisible = true;
                StateHasChanged();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error fetching customer details: {ex.Message}");
        }
    }



    private void CloseCustomerDetails()
    {
        isCustomerDetailsVisible = false;
        SelectedCustomer = null;
    }

    private async Task PreviousPage()
    {
        if (CustomerListViewModel.CurrentPage > 1)
        {
            CustomerListViewModel.CurrentPage--;
            await CustomerListViewModel.LoadCustomersAsync();
        }
    }

    private async Task NextPage()
    {
        CustomerListViewModel.CurrentPage++;
        await CustomerListViewModel.LoadCustomersAsync();
    }

    private bool CanGoToPreviousPage => CustomerListViewModel.CurrentPage > 1;
    private bool CanGoToNextPage => CustomerListViewModel.Customers.Count == CustomerListViewModel.PageSize;
}
