@page "/dashboard"
@using BankBlazor.Client.ViewModels
@using BankBlazor.Client.DTOs
@inject CustomerListViewModel CustomerListViewModel

<PageTitle>Dashboard</PageTitle>

<section class="hero-container">
    <div class="hero-content">
        <img src="/images/hero.jpg" class="hero-img">
        <div class="hero-overlay">
        <h2>Customer Dashboard</h2>
        <div>
                @foreach (var customer in CustomerListViewModel.Customers)
                {
                    <ul>
                        <button @onclick="() => ShowCustomerDetails(customer.CustomerId)">
                            @customer.Givenname @customer.Surname
                        </button>
                    </ul>
                }
            </div>
            <div class="pagination">
                <button @onclick="PreviousPage" disabled="@(!CanGoToPreviousPage)">Previous</button>

                @for (int i = Math.Max(1, CustomerListViewModel.CurrentPage - 2); i <= Math.Min(CustomerListViewModel.TotalPages, CustomerListViewModel.CurrentPage + 2); i++)
                {
                    var pageNumber = i;
                    <button class="page-button @(CustomerListViewModel.CurrentPage == pageNumber ? "active" : "")" @onclick="() => GoToPage(pageNumber)">
                        @pageNumber
                    </button>
                }



                <button @onclick="NextPage" disabled="@(!CanGoToNextPage)">Next</button>

                <input type="number" min="1" max="@CustomerListViewModel.TotalPages" @bind="PageInput" @bind:event="oninput" class="page-input" />
                <button @onclick="GoToPageInput">Go</button>
            </div>



        </div>
    </div>
</section>

@if (isCustomerDetailsVisible)
{
    <div class="custom-modal-overlay">
        <div class="custom-modal">
            <h3>Customer Details</h3>
            @if (SelectedCustomer != null)
            {
				<p><strong>Customer ID:</strong> @SelectedCustomer.CustomerId</p>
                <p><strong>Name:</strong> @SelectedCustomer.Givenname @SelectedCustomer.Surname</p>
                <p><strong>Email:</strong> @SelectedCustomer.Emailaddress</p>
                <p>
                    <strong>Phone:</strong>
                    @(string.IsNullOrWhiteSpace(SelectedCustomer.Telephonecountrycode)
                        ? string.Empty
                        : $"({SelectedCustomer.Telephonecountrycode})")
                    @SelectedCustomer.Telephonenumber
                </p>
				<p><strong>Address:</strong> @SelectedCustomer.Streetaddress @SelectedCustomer.Zipcode @SelectedCustomer.City @SelectedCustomer.Country @SelectedCustomer.CountryCode</p>
                <p><strong>Birthday:</strong>  @SelectedCustomer.Birthday</p>
                <p><strong>Gender:</strong> @SelectedCustomer.Gender</p>
                <p><strong>National Id:</strong> @SelectedCustomer.NationalId</p>
                <button @onclick="CloseCustomerDetails">Close</button>
            }
            else
            {
                <p>Loading... (SelectedCustomer is null)</p>
            }
        </div>
    </div>
}



@code {
    private CustomerDTO? SelectedCustomer;
    private bool isCustomerDetailsVisible = false;

    protected override async Task OnInitializedAsync()
    {
        await CustomerListViewModel.LoadCustomersAsync();
    }

    private async Task ShowCustomerDetails(int customerId)
    {
        try
        {
            SelectedCustomer = await CustomerListViewModel.GetCustomerByIdAsync(customerId);
            if (SelectedCustomer != null)
            {
                isCustomerDetailsVisible = true;
                StateHasChanged();
            }
        }
        catch (Exception)
        {
        }
    }


    private void CloseCustomerDetails()
    {
        isCustomerDetailsVisible = false;
        SelectedCustomer = null;
    }

    private async Task PreviousPage()
    {
        if (CustomerListViewModel.CurrentPage > 1)
        {
            CustomerListViewModel.CurrentPage--;
            await CustomerListViewModel.LoadCustomersAsync();
        }
    }

    private async Task NextPage()
    {
        if (CustomerListViewModel.CurrentPage < CustomerListViewModel.TotalPages)
        {
            CustomerListViewModel.CurrentPage++;
            await CustomerListViewModel.LoadCustomersAsync();
        }
    }

    private async Task GoToPage(int pageNumber)
    {
        if (pageNumber >= 1 && pageNumber <= CustomerListViewModel.TotalPages)
        {
            CustomerListViewModel.CurrentPage = pageNumber;
            await CustomerListViewModel.LoadCustomersAsync();
        }
    }


    private int PageInput;

    private async Task GoToPageInput()
    {
        if (PageInput >= 1 && PageInput <= CustomerListViewModel.TotalPages)
        {
            await GoToPage(PageInput);
        }
    }

    private bool CanGoToPreviousPage => CustomerListViewModel.CurrentPage > 1;
    private bool CanGoToNextPage => CustomerListViewModel.CurrentPage < CustomerListViewModel.TotalPages;
}
